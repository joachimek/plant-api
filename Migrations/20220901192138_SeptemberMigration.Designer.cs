// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using plant_api.Data;

#nullable disable

namespace plant_api.Migrations
{
    [DbContext(typeof(PlantApiContext))]
    [Migration("20220901192138_SeptemberMigration")]
    partial class SeptemberMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("plant_api.Models.Devices", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PlantID")
                        .HasColumnType("bigint");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Devices", (string)null);
                });

            modelBuilder.Entity("plant_api.Models.Guides", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxHumidity")
                        .HasColumnType("float");

                    b.Property<double>("MinHumidity")
                        .HasColumnType("float");

                    b.Property<long>("SpeciesID")
                        .HasColumnType("bigint");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("SpeciesID");

                    b.HasIndex("UserID");

                    b.ToTable("Guides", (string)null);
                });

            modelBuilder.Entity("plant_api.Models.Plants", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<long>("DeviceID")
                        .HasColumnType("bigint");

                    b.Property<long>("GuideID")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SpeciesID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("DeviceID")
                        .IsUnique();

                    b.HasIndex("GuideID");

                    b.HasIndex("SpeciesID");

                    b.ToTable("Plants", (string)null);
                });

            modelBuilder.Entity("plant_api.Models.PlantsHist", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("AirHumidity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FanOn")
                        .HasColumnType("bit");

                    b.Property<bool>("LampOn")
                        .HasColumnType("bit");

                    b.Property<long>("PlantID")
                        .HasColumnType("bigint");

                    b.Property<string>("SoilHumidity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sunlight")
                        .HasColumnType("bit");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WateredPlant")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("PlantID");

                    b.ToTable("PlantsHist", (string)null);
                });

            modelBuilder.Entity("plant_api.Models.Reviews", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<long>("GuideID")
                        .HasColumnType("bigint");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("GuideID");

                    b.HasIndex("UserID");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("plant_api.Models.SpeciesDto", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Species", (string)null);
                });

            modelBuilder.Entity("plant_api.Models.Users", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("plant_api.Models.Devices", b =>
                {
                    b.HasOne("plant_api.Models.Users", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("plant_api.Models.Guides", b =>
                {
                    b.HasOne("plant_api.Models.SpeciesDto", "Species")
                        .WithMany("Guides")
                        .HasForeignKey("SpeciesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("plant_api.Models.Users", "User")
                        .WithMany("Guides")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");

                    b.Navigation("User");
                });

            modelBuilder.Entity("plant_api.Models.Plants", b =>
                {
                    b.HasOne("plant_api.Models.Devices", "Device")
                        .WithOne("Plant")
                        .HasForeignKey("plant_api.Models.Plants", "DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("plant_api.Models.Guides", "Guide")
                        .WithMany("Plants")
                        .HasForeignKey("GuideID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("plant_api.Models.SpeciesDto", "Species")
                        .WithMany("Plants")
                        .HasForeignKey("SpeciesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Guide");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("plant_api.Models.PlantsHist", b =>
                {
                    b.HasOne("plant_api.Models.Plants", "Plant")
                        .WithMany("PlantsHists")
                        .HasForeignKey("PlantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("plant_api.Models.Reviews", b =>
                {
                    b.HasOne("plant_api.Models.Guides", "Guide")
                        .WithMany("Reviews")
                        .HasForeignKey("GuideID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("plant_api.Models.Users", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guide");

                    b.Navigation("User");
                });

            modelBuilder.Entity("plant_api.Models.Devices", b =>
                {
                    b.Navigation("Plant");
                });

            modelBuilder.Entity("plant_api.Models.Guides", b =>
                {
                    b.Navigation("Plants");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("plant_api.Models.Plants", b =>
                {
                    b.Navigation("PlantsHists");
                });

            modelBuilder.Entity("plant_api.Models.SpeciesDto", b =>
                {
                    b.Navigation("Guides");

                    b.Navigation("Plants");
                });

            modelBuilder.Entity("plant_api.Models.Users", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Guides");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
